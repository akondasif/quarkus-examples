plugins {
    id("java")
    id("io.quarkus")
    id("com.github.ben-manes.versions")
}

repositories {
     mavenLocal()
     mavenCentral()
}

dependencies {
    implementation(enforcedPlatform("io.quarkus:quarkus-universe-bom:${quarkusVersion}"))
    implementation("io.quarkus:quarkus-resteasy-mutiny")
    implementation("io.quarkus:quarkus-resteasy-jsonb")
    implementation("io.quarkus:quarkus-resteasy-qute")
    implementation("io.quarkus:quarkus-resteasy")
    implementation("io.quarkus:quarkus-vertx")
    implementation("io.smallrye.reactive:smallrye-reactive-streams-operators:${smallryeReactiveStreamsVersion}")

    testImplementation("io.quarkus:quarkus-junit5")
    testImplementation("io.rest-assured:rest-assured")
}

compileJava {
    options.encoding = "${encoding}"
    options.compilerArgs << "-parameters"
}

compileTestJava {
    options.encoding = "${encoding}"
    dependsOn("assemble")
}

java {
    def javaVersion =  JavaVersion.VERSION_11
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

test {
    useJUnitPlatform()
    // systemProperty("quarkus.test.profile", "foo")
    if (System.getProperty("native") != "it") { // exclude IT tests if command is not: gradle -Dnative=it
        exclude(
            "**/*IT.class"
        )
    }
    testLogging {
        showExceptions = true
        showStandardStreams = true
        def ev = org.gradle.api.tasks.testing.logging.TestLogEvent
        events(
            ev.PASSED,
            ev.SKIPPED,
            ev.FAILED
        )
    }
}

wrapper {
    gradleVersion = "${gradleWrapperVersion}"
}

defaultTasks("assemble", "quarkusBuild", "build")

// jvm:    ./gradlew clean quarkusBuild                                 ; ./gradlew dockerBuild dockerRun
// native: ./gradlew clean quarkusBuild buildNative --docker-build=true ; ./gradlew dockerBuild dockerRun
apply(from: "${projectDir}/docker.gradle")
